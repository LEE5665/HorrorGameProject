/**
 * Unity Moderation Events API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: alpha-1.0
 * Contact: mp-suite-player-safety@unity3d.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIModelPostReportRequest.h"

#include "ModerationModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace Moderation
{

void OpenAPIModelPostReportRequest::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Players.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("players")); WriteJsonValue(Writer, Players.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("reportReason")); WriteJsonValue(Writer, ReportReason);
	Writer->WriteIdentifierPrefix(TEXT("reportTimestamp")); WriteJsonValue(Writer, ReportTimestamp);
	Writer->WriteIdentifierPrefix(TEXT("reportedUnityPlayerId")); WriteJsonValue(Writer, ReportedUnityPlayerId);
	if (ReportedVivoxPlayerId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("reportedVivoxPlayerId")); WriteJsonValue(Writer, ReportedVivoxPlayerId.GetValue());
	}
	if (ReportingVivoxPlayerId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("reportingVivoxPlayerId")); WriteJsonValue(Writer, ReportingVivoxPlayerId.GetValue());
	}
	if (VivoxChannels.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("vivoxChannels")); WriteJsonValue(Writer, VivoxChannels.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIModelPostReportRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("players"), Players);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("reportReason"), ReportReason);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("reportTimestamp"), ReportTimestamp);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("reportedUnityPlayerId"), ReportedUnityPlayerId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("reportedVivoxPlayerId"), ReportedVivoxPlayerId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("reportingVivoxPlayerId"), ReportingVivoxPlayerId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("vivoxChannels"), VivoxChannels);

	return ParseSuccess;
}

}
